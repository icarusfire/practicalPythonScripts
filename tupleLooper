import pandas as pd

# ----------------------------------------------------------------------------
# 1. File paths
SOURCE_FILE_PATH = "dir1/source-sheet.xlsx"
TARGET_FILE_PATH = "dir2/target-sheet.xlsx"

# 2. Matching column pairs for identifying rows
S1_COL = "s1"
T1_COL = "t1"
S4_COL = "s4"
T4_COL = "t4"

MATCHING_COLUMN_PAIRS = [
    (S1_COL, T1_COL),
    # (S4_COL, T4_COL),  # Uncomment or add more pairs as needed
]

# 3. Columns to update in target, mapped from source
S2_COL = "s2"
S3_COL = "s3"
T2_COL = "t2"
T3_COL = "t3"

COLUMN_MAP = {
    S2_COL: T2_COL,
    S3_COL: T3_COL
}
# ----------------------------------------------------------------------------

def preprocess_s1(value):
    """
    Example: Remove leading/trailing whitespace, ensure empty or null becomes ''.
    Extend or modify as needed.
    """
    if pd.isnull(value):
        return ""
    return str(value).strip()

def preprocess_s4(value):
    """
    Another example. Modify as needed (e.g., remove semicolons, etc.).
    """
    if pd.isnull(value):
        return ""
    return str(value).strip()

def preprocess_s2(value):
    """
    Example: remove semicolons, replace them with dots, trim, handle nulls, etc.
    """
    if pd.isnull(value):
        return ""
    value_str = str(value).strip().replace(";", ".")
    return value_str

def preprocess_s3(value):
    """
    Adjust or add any transformations required for s3.
    """
    if pd.isnull(value):
        return ""
    return str(value).strip()

# ----------------------------------------------------------------------------
# Dictionary mapping column names to their preprocess functions.
# By default, if a column doesn't appear here, it receives a generic preprocessor.
# ----------------------------------------------------------------------------
PREPROCESS_FUNCTIONS = {
    S1_COL: preprocess_s1,
    S2_COL: preprocess_s2,
    S3_COL: preprocess_s3,
    S4_COL: preprocess_s4
}

def default_preprocess(value):
    """
    Fallback if no specific function is found in PREPROCESS_FUNCTIONS.
    Converts nulls to empty string, then strips whitespace.
    """
    if pd.isnull(value):
        return ""
    return str(value).strip()

def get_preprocess_function(col_name):
    """
    Retrieve the specific preprocess function, or a default if not found.
    """
    return PREPROCESS_FUNCTIONS.get(col_name, default_preprocess)

def build_key(row, col_pairs, is_source=True):
    """
    Constructs a tuple key from multiple column pairs:
      - For source: read from s_col in each pair
      - For target: read from t_col in each pair
    Each value is preprocessed before being included in the key.
    """
    key_elems = []
    for s_col, t_col in col_pairs:
        col_to_read = s_col if is_source else t_col
        raw_value = row[col_to_read]
        preprocessed_value = get_preprocess_function(col_to_read)(raw_value)
        key_elems.append(preprocessed_value)
    return tuple(key_elems)

def calculate(value):
    """
    Placeholder for your business logic. Currently returns value as is.
    """
    return value

def main():
    # 1. Read source and target Excel sheets
    source_df = pd.read_excel(SOURCE_FILE_PATH)
    target_df = pd.read_excel(TARGET_FILE_PATH)

    # 2. Build a mapping from source data
    #    Key: tuple built from the matching column(s), Value: dict of columns to update
    source_map = {}
    for _, row in source_df.iterrows():
        key_tuple = build_key(row, MATCHING_COLUMN_PAIRS, is_source=True)

        # Collect only the columns needed for updates, applying preprocessing
        data_to_update = {}
        for s_col in COLUMN_MAP.keys():
            raw_value = row[s_col]
            preprocessed_value = get_preprocess_function(s_col)(raw_value)
            data_to_update[s_col] = preprocessed_value

        source_map[key_tuple] = data_to_update

    # 3. Iterate target rows, match via tuple key, and update
    for idx, row in target_df.iterrows():
        target_key_tuple = build_key(row, MATCHING_COLUMN_PAIRS, is_source=False)

        if target_key_tuple in source_map:
            source_values = source_map[target_key_tuple]
            for s_col, t_col in COLUMN_MAP.items():
                new_value = calculate(source_values[s_col])
                target_df.at[idx, t_col] = new_value

    # 4. Save the updated target file
    target_df.to_excel(TARGET_FILE_PATH, index=False)

if __name__ == "__main__":
    main()
