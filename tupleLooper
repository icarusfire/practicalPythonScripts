def restore_values_with_actual_tps(conf_file_path, tps_mapping):
    """
    Updates the TPS placeholders in the given conf file with actual values from tps_mapping.
    
    :param conf_file_path: Path to the .conf file
    :param tps_mapping: Dictionary containing actual TPS values mapped by (file_name, test_case)
    """
    file_name = Path(conf_file_path).name
    updated_lines = []
    current_test_case = None  # Track the active test case

    with open(conf_file_path, "r", encoding="utf-8") as f:
        for line in f:
            # Detect test case name (assumes it is a key with an opening curly brace)
            test_case_match = re.match(r'^\s*([\w\d_]+)\s*=\s*\{', line)
            if test_case_match:
                current_test_case = test_case_match.group(1)  # Store the current test case name

            # Match "tps = ${tps}" and replace if a valid test case is found
            if current_test_case:
                tps_match = re.match(r'(\s*tps\s*=\s*)"\${tps}"', line)
                if tps_match:
                    key = (file_name, current_test_case)
                    if key in tps_mapping:
                        real_tps = tps_mapping[key]
                        line = f'{tps_match.group(1)}"{real_tps}"\n'  # Preserve indentation and replace value

            updated_lines.append(line)

    # Overwrite only if changes were made
    with open(conf_file_path, "w", encoding="utf-8") as f:
        f.writelines(updated_lines)
