def restore_values_with_actual_tps(conf_file_path, scenarios, tps_mapping):
    """
    Reuses your original placeholder replacement logicâ€”but now for restoration.
    Instead of blindly iterating over all scenarios for every line, this version tracks the current
    scenario (using a regex on lines that start with a word followed by '{').
    
    For lines like:
      tps: "${tps}"   or   tps: "{$tps}"
    it replaces the placeholder with the actual TPS value (from the Excel mapping)
    for the current scenario.
    """
    with open(conf_file_path, 'r') as f:
        lines = f.readlines()

    modified_lines = []
    current_scenario = None
    for line in lines:
        # Check if this line starts a scenario block, e.g. "scenarioName {"
        scenario_match = re.match(r"^\s*(\w+)\s*\{", line)
        if scenario_match:
            current_scenario = scenario_match.group(1)
        replaced_line = line
        # Only try to replace if we're in a scenario block and the line contains a TPS field with a placeholder.
        if current_scenario is not None:
            for item in fields_to_be_replaced_with_placeholder:
                if (f"{item}:" in line or f"{item} =" in line) and ('"${tps}"' in line or '"{$tps}"' in line):
                    file_name = Path(conf_file_path).name
                    key = (file_name, current_scenario)
                    if key in tps_mapping:
                        actual_value = tps_mapping[key]
                        # Replace the entire value portion (after the operator) with the actual TPS.
                        replaced_line = re.sub(
                            r"(\s*" + item + r"\s*[:=]\s*).*",
                            r"\1{}".format(actual_value),
                            line
                        )
                    # Once replaced for this field, break out of the inner loop.
                    break
        modified_lines.append(replaced_line)
