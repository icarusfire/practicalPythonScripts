from azure.devops.v6_0.git.models import GitRefUpdate, GitCommitRef, GitRefUpdateResult, GitPullRequest, GitPullRequestCreateOptions
from datetime import datetime
import base64

class MyAzureDevOpsClient:
    def __init__(self, git_client, project: str, repo_id: str):
        self.git_client = git_client
        self.project = project
        self.repo_id = repo_id

    def update_file_in_branch(self, branch_name: str, file_path: str, new_content: str):
        # Get the branch reference
        refs = self.git_client.get_refs(repository_id=self.repo_id, project=self.project, filter=f"heads/{branch_name}")
        if not refs:
            raise ValueError(f"Branch '{branch_name}' not found")

        branch_ref = refs[0]
        old_commit_id = branch_ref.object_id

        # Prepare the new file content
        encoded_content = base64.b64encode(new_content.encode()).decode()

        # Create a new commit
        new_commit = GitCommitRef(
            comment=f"Update {file_path}",
            changes=[
                {
                    'changeType': 'edit',
                    'item': {
                        'path': file_path
                    },
                    'newContent': {
                        'content': encoded_content,
                        'contentType': 'base64Encoded'
                    }
                }
            ],
            author={
                'name': 'Your Name',
                'email': 'your.email@example.com',
                'date': datetime.utcnow().isoformat() + 'Z'
            }
        )

        # Create a reference update
        ref_update = GitRefUpdate(
            name=f"refs/heads/{branch_name}",
            old_object_id=old_commit_id
        )

        # Create the push
        push = {
            'commits': [new_commit],
            'refUpdates': [ref_update]
        }

        # Push the new commit to the branch
        self.git_client.create_push(push=push, repository_id=self.repo_id, project=self.project)
