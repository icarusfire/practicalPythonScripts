import re
from pathlib import Path
from openpyxl import Workbook, load_workbook

fields_to_be_replaced_with_placeholder = ["tps"]

def path_template_to_regex(template: str):
    """
    Converts an Excel pathTemplate (with {variable}) into a regex pattern.
    
    Example:
      Input:  "/v5/party/{uuid}/group"
      Output: regex pattern "^/v5/party/[^/]+/group$"
    
    Note: This regex will match any URL with the same static parts and any single segment
    in place of the variableâ€”so it will match conf file URLs like "/v5/party/:myid:/group" 
    or "/v5/party/abc/group".
    """
    # Replace {variable} with a regex pattern that matches any sequence of characters except '/'
    regex_pattern = re.sub(r"\{[^}]+\}", r"[^/]+", template)
    regex_pattern = "^" + regex_pattern + "$"
    return re.compile(regex_pattern)

def load_tps_mapping(excel_input):
    """
    Loads a mapping from the metrics_data.xlsx file.
    Uses the 'pathTemplate' column as key and '%40 added' as the TPS value.
    
    Returns:
      A list of tuples: (compiled_regex, tps_value)
    """
    mapping = []
    workbook = load_workbook(excel_input)
    sheet = workbook.active

    # Read header row to dynamically find column indices.
    header = [cell.value for cell in next(sheet.iter_rows(min_row=1, max_row=1))]
    try:
        path_template_index = header.index("pathTemplate")
        tps_value_index = header.index("%40 added")
    except ValueError as e:
        raise ValueError("Required column not found in Excel file: " + str(e))

    for row in sheet.iter_rows(min_row=2, values_only=True):
        path_template = row[path_template_index]
        tps_value = row[tps_value_index]
        if path_template is not None:
            pattern = path_template_to_regex(str(path_template).strip())
            mapping.append((pattern, str(tps_value).strip() if tps_value is not None else ""))
    return mapping

def get_tps_for_url(dtab_url, tps_mapping):
    """
    Iterates through the mapping and returns the TPS value for the first matching regex.
    
    The regex patterns (derived from Excel pathTemplates) are designed to match URLs
    regardless of how the variable segment appears (e.g. ':myid:' in the conf file).
    """
    for pattern, tps_value in tps_mapping:
        if pattern.match(dtab_url):
            return tps_value
    return None

def restore_values_with_actual_tps(conf_file_path, tps_mapping):
    """
    Updates the TPS values in a conf file by matching the dtab-url in each block.
    
    The conf file is expected to have lines such as:
      dtab-url = /v5/party/:myid:/group
      tps = 23
      
    The function uses the captured dtab-url to look up the correct TPS value
    using regex matching (which tolerates differences in the variable placeholder).
    
    It supports multiple blocks with the same dtab-url.
    """
    updated_lines = 
