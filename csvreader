# New function: group rows by endpoint (ignoring data center) and add a new column with the sum of TPS values.
def combine_rows_by_endpoint(rows):
    grouped = {}
    for row in rows:
        # Group key: (service, method, pathTemplate)
        key = (row[columns["service"]], row[columns["method"]], row[columns["pathTemplate"]])
        try:
            tps_val = float(row[columns["tps"]]) if row[columns["tps"]] else 0
        except Exception:
            tps_val = 0
        if key not in grouped:
            # Save both the row and the initial TPS sum
            grouped[key] = {"row": row, "sum": tps_val}
        else:
            # Update the sum
            grouped[key]["sum"] += tps_val
            # Also, if this row has a higher TPS than the one stored, update the stored row
            try:
                current_best = float(grouped[key]["row"][columns["tps"]]) if grouped[key]["row"][columns["tps"]] else 0
            except Exception:
                current_best = 0
            if tps_val > current_best:
                grouped[key]["row"] = row

    # Build the final list of rows, appending the rounded sum tps (ceiling of the sum)
    combined_rows = []
    for entry in grouped.values():
        chosen_row = entry["row"]
        rounded_sum_tps = math.ceil(entry["sum"])
        combined_rows.append(chosen_row + [rounded_sum_tps])
    return combined_rows

rows_data = []

for service_name, url in full_urls.items():
    try:
        print(f"Fetching data from {service_name} ({url})...")
        response = requests.get(url, headers=headers, cookies=cookies)
        
        if response.status_code == 200:
            data = response.json()
            if 'data' in data and 'result' in data['data']:
                for item in data['data']['result']:
                    metric = item.get("metric", {})
                    service = service_name
                    data_center = metric.get("dc", "")
                    method = metric.get("method", "")
                    path_template = metric.get("pathTemplate", "")

                    tps = item.get("value", [])[1] if len(item.get("value", [])) > 1 else ""
                    # Compute the additional metrics based on the single TPS value
                    forty_percent_added = calculate_40_percent(tps) if tps else ""
                    rounded_tps = calculate_rounded_tps(tps) if tps else ""

                    rows_data.append([service, data_center, method, path_template, tps, rounded_tps, forty_percent_added])
        else:
            print(f"Failed to fetch data from {service_name}. Status: {response.status_code}")

    except Exception as e:
        print(f"Error {service_name}: {e}")
