import re
from pathlib import Path
from openpyxl import Workbook, load_workbook


def path_template_to_regex(template: str):
    """
    Converts an Excel pathTemplate (with {variable}) into a regex pattern
    that correctly matches dtab-url in the conf file with :variable: format.

    Converts:
    - '{variable}' -> ':[^/:]+:' (must be wrapped in colons)
    """
    regex_pattern = re.sub(r"\{[^}]+\}", r":([^/:]+):", template)
    regex_pattern = "^" + regex_pattern + "$"
    return re.compile(regex_pattern)


def load_tps_mapping(excel_input):
    """
    Reads 'pathTemplate', 'method', and '%40 added' from the Excel file, building
    a list of (compiled_regex, method, tps_value) for matching in conf files.
    """
    workbook = load_workbook(excel_input)
    sheet = workbook.active

    header = [cell.value for cell in next(sheet.iter_rows(min_row=1, max_row=1))]
    try:
        path_template_index = header.index("pathTemplate")
        tps_value_index = header.index("%40 added")
        method_index = header.index("method")
    except ValueError as e:
        raise ValueError("Required column not found in Excel file: " + str(e))

    mapping = []
    for row in sheet.iter_rows(min_row=2, values_only=True):
        path_template = row[path_template_index]
        tps_value = row[tps_value_index]
        method_value = row[method_index]

        if path_template is not None and method_value is not None:
            pattern = path_template_to_regex(str(path_template).strip())
            method = str(method_value).strip().lower()  # Ensure lowercase comparison
            tps = str(tps_value).strip() if tps_value else ""
            mapping.append((pattern, method, tps))

    return mapping


def get_tps_for_url(dtab_url, method, tps_mapping):
    """
    Returns the first matching TPS value for the given dtab_url and method
    by checking each (regex, method, tps_value) tuple in tps_mapping.
    """
    method = method.strip().lower()  # Normalize method input
    for regex_pattern, mapping_method, tps_value in tps_mapping:
        if regex_pattern.match(dtab_url) and mapping_method == method:
            return tps_value
    return None


def update_scenario_block(lines, tps_mapping):
    """
    Given the lines of a single scenario block (from the opening '{' to the closing '}'):
      1. Find the dtab-url and method (if any).
      2. If both are found, look up the TPS in tps_mapping.
      3. Replace all tps lines in that block with the new TPS.
    Returns the modified lines for this block.
    """
    dtab_url_pattern = re.compile(r'^\s*dtab-url\s*=\s*(.+?)\s*$')
    method_pattern = re.compile(r'^\s*method\s*=\s*(.+?)\s*$')
    tps_pattern = re.compile(r'^(\s*)tps\s*=\s*(\d+)\s*$')

    dtab_url = None
    scenario_method = None

    for line in lines:
        url_match = dtab_url_pattern.match(line)
        if url_match:
            dtab_url = url_match.group(1).strip().strip('"\'')
        
        method_match = method_pattern.match(line)
        if method_match:
            scenario_method = method_match.group(1).strip().strip('"\'').lower()  # Normalize

        if dtab_url and scenario_method:
            break

    if dtab_url and scenario_method:
        new_tps = get_tps_for_url(dtab_url, scenario_method, tps_mapping)
        if new_tps is not None:
            updated_block = []
            for line in lines:
                tps_match = tps_pattern.match(line)
                if tps_match:
                    indent = tps_match.group(1)
                    line = f"{indent}tps = {new_tps}\n"
                updated_block.append(line)
            return updated_block

    return lines


def restore_values_with_actual_tps(conf_file_path, tps_mapping):
    """
    Reads a .conf file, processes it block by block.
    A block is defined as a line ending with '{' up to the matching '}'.
    For each block, we gather lines, then update tps if there's a matching dtab-url and method.
    """
    scenario_start_pattern = re.compile(r'^\s*[A-Za-z0-9_\-]+\s*\{$')
    scenario_end_pattern = re.compile(r'^\s*}\s*$')

    updated_file_lines = []
    block_lines = []
    in_block = False

    with open(conf_file_path, "r", encoding="utf-8") as f:
        for line in f:
            if not in_block:
                if scenario_start_pattern.match(line):
                    in_block = True
                    block_lines = [line]
                else:
                    updated_file_lines.append(line)
            else:
                block_lines.append(line)
                if scenario_end_pattern.match(line):
                    updated_block = update_scenario_block(block_lines, tps_mapping)
                    updated_file_lines.extend(updated_block)
                    block_lines = []
                    in_block = False

    if block_lines:
        updated_file_lines.extend(block_lines)

    with open(conf_file_path, "w", encoding="utf-8") as f:
        f.writelines(updated_file_lines)


def find_conf_files_path(my_filepath, excel_output="output.xlsx", restore_placeholder=False, excel_input="metrics_data.xlsx"):
    """
    Iterates through all .conf files under the given filepath.
    For each file, updates the TPS value by matching the block's dtab-url
    and method against the pathTemplate-based regex from the Excel file.
    """
    workbook = Workbook()
    sheet = workbook.active
    sheet.append(["API Name", "File Name", "dtab-url", "Method", "Data URL", "Default TPS", "Prod TPS", "Prod Weight", "Delta TPS", "Delta Weight"])

    tps_mapping = load_tps_mapping(excel_input)

    p = Path(my_filepath)
    for conf_file in p.rglob("*.conf"):
        if "scenarios" in conf_file.name and restore_placeholder:
            restore_values_with_actual_tps(conf_file, tps_mapping)


if __name__ == "__main__":
    directory_path = Path(Path(__file__).parent, "..", "api-gatling-tests-java/src/main/resources/api/partyandagreementsearch")
    find_conf_files_path(directory_path, excel_output="scenario_tps_config.xlsx", restore_placeholder=True)
