import re
from pathlib import Path
from openpyxl import Workbook, load_workbook

import re

def path_template_to_regex(template: str):
    """
    Converts an Excel pathTemplate (with {variable}) into a regex pattern
    that correctly matches dtab-url in the conf file with :variable: format.

    - Excel: '/v2/agreements/execution-mandates/{id}'
    - Conf: '/v2/agreements/execution-mandates/:someid:'

    Must NOT match:
    - '/v2/agreements/execution-mandates/somevalue' (missing colons)
    - '/v2/agreements/execution-mandates/{url}' (literal brackets)

    Converts:
    - '{variable}' -> ':[^/:]+:' (must be wrapped in colons)

    Ensures:
    - '/v2/agreements/execution-mandates/:somevalue:' ✅ Matches
    - '/v2/agreements/execution-mandates/somevalue' ❌ No match
    - '/v2/agreements/execution-mandates/{url}' ❌ No match
    """
    # Convert `{variable}` to `:[^/:]+:` ensuring it allows only `:something:` format
    regex_pattern = re.sub(r"\{[^}]+\}", r":([^/:]+):", template)

    # Ensure the regex matches the full path
    regex_pattern = "^" + regex_pattern + "$"

    return re.compile(regex_pattern)


def load_tps_mapping(excel_input):
    """
    Reads 'pathTemplate' and '%40 added' from the Excel file, building
    a list of (compiled_regex, tps_value) for matching in conf files.
    """
    workbook = load_workbook(excel_input)
    sheet = workbook.active

    header = [cell.value for cell in next(sheet.iter_rows(min_row=1, max_row=1))]
    try:
        path_template_index = header.index("pathTemplate")
        tps_value_index = header.index("%40 added")
    except ValueError as e:
        raise ValueError("Required column not found in Excel file: " + str(e))

    mapping = []
    for row in sheet.iter_rows(min_row=2, values_only=True):
        path_template = row[path_template_index]
        tps_value = row[tps_value_index]
        if path_template is not None:
            pattern = path_template_to_regex(str(path_template).strip())
            mapping.append((pattern, str(tps_value).strip() if tps_value else ""))
    return mapping

def get_tps_for_url(dtab_url, tps_mapping):
    """
    Returns the first matching TPS value for the given dtab_url
    by checking each (regex, tps_value) pair in tps_mapping.
    """
    for regex_pattern, tps_value in tps_mapping:
        if regex_pattern.match(dtab_url):
            return tps_value
    return None

def update_scenario_block(lines, tps_mapping):
    """
    Given the lines of a single scenario block (from the opening '{' to the closing '}'):
      1. Find the dtab-url (if any).
      2. If found, look up the TPS in tps_mapping.
      3. Replace all tps lines in that block with the new TPS.

    Returns the modified lines for this block.
    """
    dtab_url_line_pattern = re.compile(r'^\s*dtab-url\s*=\s*(.+?)\s*$')
    tps_line_pattern       = re.compile(r'^(\s*)tps\s*=\s*(\d+)\s*$')

    # First pass: find dtab-url
    dtab_url = None
    for line in lines:
        match = dtab_url_line_pattern.match(line)
        if match:
            dtab_url = match.group(1).strip().strip('"\'')
            break

    # Second pass: if we found a matching dtab-url, update all tps lines
    if dtab_url:
        new_tps = get_tps_for_url(dtab_url, tps_mapping)
        if new_tps is not None:
            updated_block = []
            for line in lines:
                tps_match = tps_line_pattern.match(line)
                if tps_match:
                    indent = tps_match.group(1)
                    line = f"{indent}tps = {new_tps}\n"
                updated_block.append(line)
            return updated_block

    # If no dtab-url or no TPS found, return lines unchanged
    return lines

def restore_values_with_actual_tps(conf_file_path, tps_mapping):
    """
    Reads a .conf file, processes it block by block.
    A block is defined as a line ending with '{' up to the matching '}'.
    For each block, we gather lines, then update tps if there's a matching dtab-url.
    """
    scenario_start_pattern = re.compile(r'^\s*[A-Za-z0-9_\-]+\s*\{$')
    scenario_end_pattern   = re.compile(r'^\s*}\s*$')

    updated_file_lines = []
    block_lines = []
    in_block = False

    with open(conf_file_path, "r", encoding="utf-8") as f:
        for line in f:
            if not in_block:
                # If we see something like "some_scenario {", this starts a block
                if scenario_start_pattern.match(line):
                    in_block = True
                    block_lines = [line]
                else:
                    # Not in a block yet, just copy the line as is
                    updated_file_lines.append(line)
            else:
                # We are inside a block
                block_lines.append(line)
                # Check if this line closes the block
                if scenario_end_pattern.match(line):
                    # Process the entire block
                    updated_block = update_scenario_block(block_lines, tps_mapping)
                    updated_file_lines.extend(updated_block)
                    block_lines = []
                    in_block = False

    # If the file doesn't end cleanly (unlikely, but just in case),
    # we append whatever remains in block_lines
    if block_lines:
        updated_file_lines.extend(block_lines)

    # Write the final updated content back to the file
    with open(conf_file_path, "w", encoding="utf-8") as f:
        f.writelines(updated_file_lines)

def find_conf_files_path(my_filepath, excel_output="output.xlsx", restore_placeholder=False, excel_input="metrics_data.xlsx"):
    """
    Iterates through all .conf files under the given filepath.
    For each file, updates the TPS value by matching the block's dtab-url
    against the pathTemplate-based regex from the Excel file.
    """
    # Optional: create a workbook for output if you need it
    workbook = Workbook()
    sheet = workbook.active
    sheet.append(["API Name", "File Name", "dtab-url", "Method", "Data URL", "Default TPS", "Prod TPS", "Prod Weight", "Delta TPS", "Delta Weight"])

    tps_mapping = load_tps_mapping(excel_input)

    p = Path(my_filepath)
    for conf_file in p.rglob("*.conf"):
        restore_values_with_actual_tps(conf_file, tps_mapping)

if __name__ == "__main__":
    directory_path = Path(Path(__file__).parent, "..", "api-gatling-tests-java/src/main/resources/api/partyandagreementsearch")
    find_conf_files_path(directory_path, excel_output="scenario_tps_config.xlsx", restore_placeholder=True)
