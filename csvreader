import re
from pathlib import Path
from openpyxl import Workbook, load_workbook

fields_to_be_replaced_with_placeholder = ["tps"]

def load_tps_mapping(excel_input):
    """
    Loads a mapping from the metrics_data.xlsx file.
    Uses the 'Dtab-URL' column as key and '%40 added' as the tps value.
    """
    mapping = {}
    workbook = load_workbook(excel_input)
    sheet = workbook.active

    # Read header row to dynamically find column indices
    header = [cell.value for cell in next(sheet.iter_rows(min_row=1, max_row=1))]
    try:
        dtab_url_index = header.index("Dtab-URL")
        tps_value_index = header.index("%40 added")
    except ValueError as e:
        raise ValueError("Required column not found in Excel file: " + str(e))

    for row in sheet.iter_rows(min_row=2, values_only=True):
        dtab_url = row[dtab_url_index]
        tps_value = row[tps_value_index]
        if dtab_url is not None:
            mapping[str(dtab_url).strip()] = str(tps_value).strip() if tps_value is not None else ""
    return mapping

def restore_values_with_actual_tps(conf_file_path, tps_mapping):
    """
    Updates the tps values in a conf file by using the dtab-url from each scenario block.
    If multiple scenarios share the same dtab-url, each one will be updated with the corresponding tps value.
    """
    updated_lines = []
    current_dtab_url = None

    # Pattern to detect a line with dtab-url, e.g., "dtab-url = some_value"
    dtab_url_line_pattern = re.compile(r'^\s*dtab-url\s*=\s*(.+?)\s*$')
    # Pattern to detect a tps line, e.g., "tps = 23"
    tps_line_pattern = re.compile(r'^(\s*)tps\s*=\s*(\d+)\s*$')
    # Pattern to detect the closing brace, indicating the end of a block
    closing_brace_pattern = re.compile(r'^(\s*)}\s*$')

    with open(conf_file_path, "r", encoding="utf-8") as f:
        for line in f:
            # Look for the dtab-url line to capture the key for this block
            dtab_match = dtab_url_line_pattern.match(line)
            if dtab_match:
                current_dtab_url = dtab_match.group(1).strip()

            # Update tps line if we're inside a block with a captured dtab-url
            tps_match = tps_line_pattern.match(line)
            if tps_match and current_dtab_url:
                indent = tps_match.group(1)
                if current_dtab_url in tps_mapping:
                    real_tps = tps_mapping[current_dtab_url]
                    line = f"{indent}tps={real_tps}\n"

            # Reset current_dtab_url at the end of a block
            if closing_brace_pattern.match(line):
                current_dtab_url = None

            updated_lines.append(line)

    with open(conf_file_path, "w", encoding="utf-8") as f:
        f.writelines(updated_lines)

def find_conf_files_path(my_filepath, excel_output="output.xlsx", restore_placeholder=False, excel_input="metrics_data.xlsx"):
    """
    Iterates through all .conf files under the given filepath.
    For each file, it updates the tps value based on the dtab-url found in each test scenario block.
    """
    # Create an output workbook (if needed for further processing)
    workbook = Workbook()
    sheet = workbook.active
    sheet.append(["API Name", "File Name", "Dtab-URL", "Method", "Data URL", "Default TPS", "Prod TPS", "Prod Weight", "Delta TPS", "Delta Weight"])

    # Load the TPS mapping from the metrics excel file
    tps_mapping = load_tps_mapping(excel_input)

    p = Path(my_filepath)
    for conf_file in p.rglob("*.conf"):
        restore_values_with_actual_tps(conf_file, tps_mapping)

if __name__ == "__main__":
    directory_path = Path(Path(__file__).parent, "..", "api-gatling-tests-java/src/main/resources/api/")
    find_conf_files_path(directory_path, excel_output="scenario_tps_config.xlsx", restore_placeholder=True)
