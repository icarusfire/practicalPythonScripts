
wb = Workbook()
sheet = wb.active
sheet.title = "Max Tps Last 7 days"
# Added new column "rounded sum tps"
sheet.append(["service", "data center", "method", "pathTemplate", "max tps last 7 days", "rounded tps", "40% added", "rounded sum tps"])

# Column indices for easy reference
columns = {
    "service": 0,
    "data_center": 1,
    "method": 2,
    "pathTemplate": 3,
    "tps": 4,
    "rounded_tps": 5,
    "forty_percent_added": 6
    # The "rounded sum tps" will be appended, index 7 in the final row.
}

def calculate_40_percent(tps):
    return math.ceil(float(tps) * 1.4) * 2

def calculate_rounded_tps(tps):
    return math.ceil(float(tps) * 2)

def unify_service_name(name: str) -> str:
    """
    If the service name ends with ' dcr' or ' wpr',
    remove that suffix so both become one base name.
    Example: "xxx dcr" => "xxx", "xxx wpr" => "xxx".
    """
    tokens = name.rsplit(" ", 1)
    if len(tokens) == 2 and tokens[1] in ["dcr", "wpr"]:
        return tokens[0]
    return name

# New function: group rows by endpoint (ignoring data center) and add a new column with the sum of TPS values.
def combine_rows_by_endpoint(rows):
    grouped = {}
    for row in rows:
        # Group key: (service, method, pathTemplate)
        key = (row[columns["service"]], row[columns["method"]], row[columns["pathTemplate"]])
        try:
            tps_val = float(row[columns["tps"]]) if row[columns["tps"]] else 0
        except Exception:
            tps_val = 0

        if key not in grouped:
            grouped[key] = {"row": row, "sum": tps_val}
        else:
            grouped[key]["sum"] += tps_val
            # Also, if this row has a higher TPS than the one stored, update the stored row
            try:
                current_best = float(grouped[key]["row"][columns["tps"]]) if grouped[key]["row"][columns["tps"]] else 0
            except Exception:
                current_best = 0

            if tps_val > current_best:
                grouped[key]["row"] = row

    # Build the final list of rows, appending the rounded sum tps (ceiling of the sum)
    combined_rows = []
    for entry in grouped.values():
        chosen_row = entry["row"]
        rounded_sum_tps = math.ceil(entry["sum"])
        combined_rows.append(chosen_row + [rounded_sum_tps])
    return combined_rows

rows_data = []

for service_name, url in full_urls.items():
    # Unify service names that differ only by trailing " dcr"/" wpr"
    unified_name = unify_service_name(service_name)
    try:
        print(f"Fetching data from {unified_name} ({url})...")
        response = requests.get(url, headers=headers, cookies=cookies)
        
        if response.status_code == 200:
            data = response.json()
            if 'data' in data and 'result' in data['data']:
                for item in data['data']['result']:
                    metric = item.get("metric", {})
                    data_center = metric.get("dc", "")
                    method = metric.get("method", "")
                    path_template = metric.get("pathTemplate", "")

                    tps = item.get("value", [])[1] if len(item.get("value", [])) > 1 else ""
                    # Compute the additional metrics based on the single TPS value
                    forty_percent_added = calculate_40_percent(tps) if tps else ""
                    rounded_tps = calculate_rounded_tps(tps) if tps else ""

                    # Use the unified service name in the row
                    rows_data.append([
                        unified_name,
                        data_center,
                        method,
                        path_template,
                        tps,
                        rounded_tps,
                        forty_percent_added
                    ])
        else:
            print(f"Failed to fetch data from {unified_name}. Status: {response.status_code}")

    except Exception as e:
        print(f"Error {unified_name}: {e}")

# Group rows by endpoint and add the new column with the sum of TPS values.
combined_rows_data = combine_rows_by_endpoint(rows_data)

for row in combined_rows_data:
    sheet.append(row)

wb.save(excel_file)
print(f"Ready {excel_file}")
