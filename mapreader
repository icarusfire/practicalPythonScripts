def find_yaml_refs(item, base_dir):
    """
    Recursively walks through item (which can be dict, list, or str).
    Returns a list of absolute paths to .yml or .yaml files discovered.
    """
    refs = []

    if isinstance(item, dict):
        # Look at each key/value in the dict
        for k, v in item.items():
            # If the key is 'template' or 'extends', and the value ends with .yml/.yaml
            if k in ['template', 'extends']:
                # Single string?
                if isinstance(v, str) and v.lower().endswith(('.yml', '.yaml')):
                    refs.append(os.path.abspath(os.path.join(base_dir, v)))
                # Or possibly a list?
                elif isinstance(v, list):
                    for entry in v:
                        if isinstance(entry, str) and entry.lower().endswith(('.yml', '.yaml')):
                            refs.append(os.path.abspath(os.path.join(base_dir, entry)))
            # Recurse deeper to catch nested templates
            refs.extend(find_yaml_refs(v, base_dir))

    elif isinstance(item, list):
        for element in item:
            refs.extend(find_yaml_refs(element, base_dir))

    # If it's a string, do nothing special here unless you want to catch
    # custom keys, but we've handled that above with dict checks.

    return refs
