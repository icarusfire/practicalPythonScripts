import java.io.*;
import java.nio.file.*;
import java.util.Objects;

public class ResourceUtil {
    /**
     * Loads a resource as an InputStream. Works for both JAR and local execution.
     *
     * @param resourcePath the path to the resource
     * @return InputStream of the resource
     * @throws IOException if the resource cannot be found
     */
    public static InputStream getResourceAsStream(String resourcePath) throws IOException {
        ClassLoader classLoader = Thread.currentThread().getContextClassLoader();
        InputStream inputStream = classLoader.getResourceAsStream(resourcePath);
        
        if (inputStream == null) {
            // If running locally, try reading from the file system
            Path path = Paths.get(resourcePath);
            if (Files.exists(path)) {
                return Files.newInputStream(path);
            } else {
                throw new FileNotFoundException("Resource not found: " + resourcePath);
            }
        }
        return inputStream;
    }

    /**
     * Loads a resource as a File. Useful if the resource is accessible as a file on disk.
     *
     * @param resourcePath the path to the resource
     * @return File object
     * @throws IOException if the file cannot be found
     */
    public static File getResourceAsFile(String resourcePath) throws IOException {
        InputStream stream = getResourceAsStream(resourcePath);
        File tempFile = File.createTempFile("resource", ".tmp");
        tempFile.deleteOnExit();
        
        try (FileOutputStream out = new FileOutputStream(tempFile)) {
            byte[] buffer = new byte[1024];
            int bytesRead;
            while ((bytesRead = stream.read(buffer)) != -1) {
                out.write(buffer, 0, bytesRead);
            }
        }
        return tempFile;
    }
}
