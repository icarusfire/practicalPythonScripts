import os
import re
import fileinput
from enum import Enum

class FileType(Enum):
    JAVA = ".java"
    POM = "pom.xml"
    ANY = "any"

def search_and_replace(search_text, replacement_text, path=None, file_type=FileType.ANY):
    if path:
        if os.path.isfile(path):
            if should_process_file(path, file_type):
                replace_in_file(search_text, replacement_text, path)
        elif os.path.isdir(path):
            for root, dirs, files in os.walk(path):
                for file in files:
                    file_path = os.path.join(root, file)
                    if should_process_file(file_path, file_type):
                        replace_in_file(search_text, replacement_text, file_path)
        else:
            print(f"Path {path} does not exist.")
    else:
        # If no path is provided, use the current directory
        for root, dirs, files in os.walk('.'):
            for file in files:
                file_path = os.path.join(root, file)
                if should_process_file(file_path, file_type):
                    replace_in_file(search_text, replacement_text, file_path)

def should_process_file(file_path, file_type):
    if file_type == FileType.ANY:
        return True
    if file_type == FileType.JAVA and file_path.endswith(".java"):
        return True
    if file_type == FileType.POM and file_path.endswith("pom.xml"):
        return True
    return False

def replace_in_file(search_text, replacement_text, file_path):
    try:
        with fileinput.FileInput(file_path, inplace=True, backup='.bak') as file:
            for line in file:
                new_line = re.sub(search_text, replacement_text, line)
                print(new_line, end='')
        print(f"Processed {file_path}")
    except Exception as e:
        print(f"Error processing file {file_path}: {e}")

def replace_in_file(search_text, replacement_text, file_path):
    """
    Replaces all occurrences of search_text with replacement_text in the specified file, preserving line endings.

    Parameters:
    search_text (str): Text to search for.
    replacement_text (str): Text to replace with.
    file_path (str): Path to the file where the replacement should occur.
    """
    try:
        # Detect original line endings
        with open(file_path, 'rb') as f:
            content = f.read()
            if b'\r\n' in content:
                original_line_ending = '\r\n'
            else:
                original_line_ending = '\n'
        
        with open(file_path, 'r', newline=original_line_ending) as file:
            lines = file.readlines()

        with open(file_path, 'w', newline=original_line_ending) as file:
            for line in lines:
                new_line = re.sub(search_text, replacement_text, line)
                file.write(new_line)

        print(f"Processed {file_path}")
    except Exception as e:
        print(f"Error processing file {file_path}: {e}")

# Example usage
tasks = [
    {"search_text": "oldText1", "replacement_text": "newText1", "path": "DIR/submodule1", "file_type": FileType.JAVA},
    {"search_text": "oldText2", "replacement_text": "newText2", "path": "DIR/submodule2/pom.xml", "file_type": FileType.POM},
    {"search_text": "oldText3", "replacement_text": "newText3", "path": None, "file_type": FileType.ANY}  # Operate on all files in the current directory
]

for task in tasks:
    search_and_replace(task["search_text"], task["replacement_text"], task["path"], task["file_type"])
